{
instructions: {
    // Immediate value operations
    // ================================
    addi: {
        title: "Add immediate to register",
        args: {"r": "gpr", "immediate": "u8"},
        encoding: ["00", "00", "immediate", "r"],
        pseudocode: "r += immediate",
        microcode: [
            ["f2->left", "f7->right", "alu_add->result", "result->f1", "$next_instruction", "end_instruction"]
        ]
    },
    subi: {
        title: "Subtract immediate from register",
        args: {"r": "gpr", "immediate": "u8"},
        encoding: ["00", "01", "immediate", "r"],
        pseudocode: "r += immediate",
        microcode: [
            ["f2->left", "f7->right", "alu_add->result", "result->f1", "$next_instruction", "end_instruction"]
        ]
    },
    cmpi: {
        title: "Compare immediate with register",
        args: {"r": "gpr", "immediate": "u8"},
        encoding: ["00", "10", "immediate", "r"],
        pseudocode: "ignore_value(r - immediate)",
    },
    addipc: {
        title: "Add immediate to program counter",
        args: {"rd": "gpr", "immediate": "u8"},
        encoding: ["00", "11", "immediate", "rd"],
        pseudocode: "r = Pc + immediate",
    },
    ldi: {
        title: "Load immediate",
        args: {"rd": "gpr", "immediate": "u8"},
        encoding: ["010", "0", "immediate", "rd"],
        pseudocode: "r = immediate",
        microcode: [
            ["zero->left", "f7->right", "alu_or->result", "result->f1", "$next_instruction", "end_instruction"]
        ]
    },
    ldui: {
        title: "Load upper immediate",
        args: {"rd": "gpr", "immediate": "u8"},
        encoding: ["010", "1", "immediate", "rd"],
        pseudocode: "r = immediate << 8",
        microcode: [
            ["zero->left", "f7->right", "alu_or->result", "result->f1", "$next_instruction", "end_instruction"]
        ]
    },

    // ALU operations
    // ================================
    add: {
        title: "Add",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "00000", "rs", "rd"],
        pseudocode: "rd = rd + rs",
    },
    addc: {
        title: "Add with carry",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "00001", "rs", "rd"],
        pseudocode: "rd = rd + rs + carry",
    },
    sub: {
        title: "Subtract",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "00010", "rs", "rd"],
        pseudocode: "rd = rd - rs",
    },
    subc: {
        title: "Subtract with carry",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "00011", "rs", "rd"],
        pseudocode: "rd = rd - rs + carry",
    },
    rsub: {
        title: "Reverse subtract",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "00100", "rs", "rd"],
        pseudocode: "rd = rs - rd",
    },
    rsubc: {
        title: "Reverse subtract with carry",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "00101", "rs", "rd"],
        pseudocode: "rd = rs - rd + carry",
    },
    cmp: {
        title: "Compare value",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "00110", "rs", "rd"],
        pseudocode: "ignore_value(rd - rs)",
    },
    and: {
        title: "Bitwise and",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "00111", "rs", "rd"],
        pseudocode: "rd = rd & rs",
    },
    or: {
        title: "Bitwise or",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "01000", "rs", "rd"],
        pseudocode: "rd = rd | rs",
    },
    xor: {
        title: "Bitwise exclusive or",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "01001", "rs", "rd"],
        pseudocode: "rd = rd ^ rs",
    },
    upsample: {
        title: "Upsample two 8bit values to 16bit",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "01010", "rs", "rd"],
        pseudocode: "rd = (rd & 0xff) | (rs << 8)",
        note: "Encoding of this instruction has the source registers backwards compared to all other ALU instruction. This is because this functional unit is reused for `ldui` instruction and we need to have the upper byte come from the right bus."
    },
    not: {
        title: "Bitwise negation",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "01011", "rs", "rd"],
        pseudocode: "rd = ~rs",
    },
    shr: {
        title: "Shift right by 1 bit",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "01100", "rs", "rd"],
        pseudocode: "rd = rs >> 1",
    },
    shrc: {
        title: "Shift right by 1 bit with carry",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "01101", "rs", "rd"],
        pseudocode: "rd = (rs >> 1) | (carry << 15)",
    },
    shra: {
        title: "Shift right by 1 bit arithmetic",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "01110", "rs", "rd"],
        pseudocode: "rd = (rs >> 1) | (rs & 0x8000)",
    },
    shr8: {
        title: "Shift right by 8 bits",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "01111", "rs", "rd"],
        pseudocode: "rd = rs >> 8",
    },
    mvz: {
        title: "Move value if zero",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "10", "000", "rs", "rd"],
        pseudocode: "if zero: rd = rs",
    },
    mvnz: {
        title: "Move value if not zero",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "10", "001", "rs", "rd"],
        pseudocode: "if not zero: rd = rs",
    },
    mvc: {
        title: "Move value if carry",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "10", "010", "rs", "rd"],
        pseudocode: "if carry: rd = rs",
    },
    mvnc: {
        title: "Move value if not carry",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "10", "011", "rs", "rd"],
        pseudocode: "if not carry: rd = rs",
    },
    mvn: {
        title: "Move value if negative",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "10", "100", "rs", "rd"],
        pseudocode: "if carry: rd = rs",
    },
    mvnn: {
        title: "Move value if not carry",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "10", "101", "rs", "rd"],
        pseudocode: "if not zero: rd = rs",
    },
    mvo: {
        title: "Move value if overflow",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "10", "110", "rs", "rd"],
        pseudocode: "if overflow: rd = rs",
    },
    mvno: {
        title: "Move value if not overflow",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "10", "111", "rs", "rd"],
        pseudocode: "if not overflow: rd = rs",
    },
    mv: {
        title: "Move value",
        args: {"rd": "gpr", "rs": "gpr"},
        encoding: ["011", "11000", "rs", "rd"],
        pseudocode: "rd = rs",
    },

    // 7 free opcodes

    // Load / store
    // ================================
    ld: {
        title: "Load from memory",
        args: {"rd": "gpr", "address": "gpr", "offset": "u5"},
        encoding: ["10", "0", "offset", "address", "rd"],
        pseudocode: "rd = memory[address + offset]",
        cycles: 2,
    },
    st: {
        title: "Store to memory",
        args: {"rs": "gpr", "address": "gpr", "offset": "u5"},
        encoding: ["10", "1", "offset", "address", "rs"],
        pseudocode: "memory[address + offset] = rs",
        cycles: 2,
    },

    // Relative jumps
    j: {
        title: "Relative jump",
        args: {"offset": "s12"},
        encoding: ["110", "0", "offset"],
        pseudocode: "Pc += offset",
    },
    jl: {
        title: "Relative jump and link",
        args: {"offset": "s12"},
        encoding: ["110", "1", "offset"],
        pseudocode: [
            "r1 = Pc",
            "Pc += offset",
        ],
    },

    // Control registers (Prefix 1110)
    // ===============================
    ldcr: {
        title: "Load from control register",
        args: {"rd": "gpr", "cr": "cr"},
        encoding: ["1110", "0", "cr", "xxxx", "rd"],
        pseudocode: "rd = cr",
    },
    stcr: {
        title: "Store to control register",
        args: {"cr": "cr", "rs": "gpr"},
        encoding: ["1110", "1", "cr", "xxxx", "rs"],
        pseudocode: "cr = rs",
    },

    // Branch
    // ================================
    bz: {
        title: "Branch if zero",
        args: {"offset": "s8"},
        encoding: ["11110", "000", "offset"],
        pseudocode: "if zero: Pc += offset",
        note: "Branch delay slot",
    },
    bnz: {
        title: "Branch if not zero",
        args: {"offset": "s8"},
        encoding: ["11110", "001", "offset"],
        pseudocode: "if !zero: Pc += offset",
        note: "Branch delay slot",
    },
    bc: {
        title: "Branch if carry",
        args: {"offset": "s8"},
        encoding: ["11110", "010", "offset"],
        pseudocode: "if carry: Pc += offset",
        note: "Branch delay slot",
    },
    bnc: {
        title: "Branch if not carry",
        args: {"offset": "s8"},
        encoding: ["11110", "011", "offset"],
        pseudocode: "if !carry: Pc += offset",
        note: "Branch delay slot",
    },
    bn: {
        title: "Branch if negative",
        args: {"offset": "s8"},
        encoding: ["11110", "100", "offset"],
        pseudocode: "if negative: Pc += offset",
        note: "Branch delay slot",
    },
    bnn: {
        title: "Branch if not negative",
        args: {"offset": "s8"},
        encoding: ["11110", "101", "offset"],
        pseudocode: "if !negative: Pc += offset",
        note: "Branch delay slot",
    },
    bo: {
        title: "Branch if overflow",
        args: {"offset": "s8"},
        encoding: ["11110", "110", "offset"],
        pseudocode: "if overflow: Pc += offset",
        note: "Branch delay slot",
    },
    bno: {
        title: "Branch if not overflow",
        args: {"offset": "s8"},
        encoding: ["11110", "111", "offset"],
        pseudocode: "if !overflow: Pc += offset",
        note: "Branch delay slot",
    },

    // Misc
    // ============================
    syscall: {
        title: "Syscall",
        args: {"code": "u8"},
        encoding: ["11111", "000", "code"],
    },
    ja: {
        title: "Absolute jump",
        args: {"address": "gpr"},
        encoding: ["11111", "001", "xxxx", "address"],
        pseudocode: "Pc = address",
    },
    jla: {
        title: "Absolute jump and link",
        args: {"address": "gpr"},
        encoding: ["11111", "010", "xxxx", "address"],
        pseudocode: [
            "r1 = Pc" ,
            "Pc = address",
        ],
    },
    ldp: {
        title: "Load from program memory",
        args: {"rd": "gpr", "address": "gpr"},
        encoding: ["11111", "011", "address", "rd"],
        pseudocode: "rd = program_memory[address]",
    },
    st_cond: {
        title: "Store to memory conditional",
        args: {"address": "gpr", "rs": "gpr"},
        description: "Stores a value in memory unless the CPU was interrupted since last load",
        encoding: ["11111", "100", "address", "rs"],
        pseudoceode: "if !interrupted: memory[address] = rs",
    },
    reti: {
        title: "Return from interrupt",
        encoding: ["11111", "101", "xxxxxxxx"],
    },
    // 2 free opcodes
    break: {
        title: "Break",
        encoding: ["11111", "111", "xxxxxxxx"],
    },
},
//"invalid_instruction_microcode": [[]] //TODO: microcode
substitutions: {
    next_instruction: ["pc->addr_base", "one->addr_offset", "mem_address->pc", "program_segment", "read_mem_data", "mem_data->instruction"],
}
}

