{
instructions: {
    // Immediate operations (Prefix 00)
    // ================================
    "addi": {
        title: "Add immediate",
        args: {"r": "gpr", "immediate": "u8"},
        encoding: ["00", "000", "immediate", "r"],
        pseudocode: "r += immediate",
        cycles: 1
    },
    "subi": {
        title: "Subtract immediate",
        args: {"r": "gpr", "immediate": "u8"},
        encoding: ["00", "001", "immediate", "r"],
        pseudocode: "r -= immediate",
        cycles: 1
    },
    "andi": {
        title: "And immediate",
        args: {"r": "gpr", "immediate": "u8"},
        encoding: ["00", "010", "immediate", "r"],
        pseudocode: "r &= immediate",
        cycles: 1
    },
    "ori": {
        title: "Or immediate",
        args: {"r": "gpr", "immediate": "u8"},
        encoding: ["00", "011", "immediate", "r"],
        pseudocode: "r |= immediate",
        cycles: 1
    },
    "ldi": {
        title: "Load immediate",
        args: {"r": "gpr", "immediate": "u8"},
        encoding: ["00", "100", "immediate", "r"],
        pseudocode: "r = immediate",
        cycles: 1
    },
    "ldui": {
        title: "Load upper immediate",
        args: {"r": "gpr", "immediate": "u8"},
        encoding: ["00", "101", "immediate", "r"],
        pseudocode: "r = immediate << 8",
        cycles: 1
    },
    "addipc": {
        title: "Add immediate to program counter",
        args: {"r": "gpr", "immediate": "s8"},
        encoding: ["00", "110", "r", "immediate"],
        pseudocode: "r = Pc + immediate",
        cycles: 1
    },
    /* Free opcode ["00", "111"] */
    /* TODO: Bit operations (set, unset, toggle, test) ?? */

    // 3 operand operations (Prefix 01)
    // ================================
    "add": {
        title: "Add",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "00000", "b", "c", "a"],
        pseudocode: "a = b + c",
        cycles: 1
    },
    "addc": {
        title: "Add with carry",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "00001", "b", "c", "a"],
        pseudocode: "a = b + c + carry",
        cycles: 1
    },
    "sub": {
        title: "Subtract",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "00010", "b", "c", "a"],
        pseudocode: "a = b - c",
        cycles: 1
    },
    "subc": {
        title: "Subtract with carry",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "00011", "b", "c", "a"],
        pseudocode: "a = b - c + carry",
        cycles: 1
    },
    "and": {
        title: "And",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "00100", "b", "c", "a"],
        pseudocode: "a = b & c",
        cycles: 1
    },
    "or": {
        title: "Or",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "00101", "b", "c", "a"],
        pseudocode: "a = b | c",
        cycles: 1
    },
    "nor": {
        title: "Nor",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "00110", "b", "c", "a"],
        pseudocode: "a = ~(b | c)",
        cycles: 1
    },
    "xor": {
        title: "Xor",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "00111", "b", "c", "a"],
        pseudocode: "a = b ^ c",
        cycles: 1
    },
    "andshr": {
        title: "And shift right",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "01000", "b", "c", "a"],
        pseudocode: "a = (b & c) >> 1 #logical",
        cycles: 1
    },
    "andshra": {
        title: "And shift right arithmetic",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "01001", "b", "c", "a"],
        pseudocode: "a = (b & c) >> 1 #arithmetic",
        cycles: 1
    },
    "andshrc": {
        title: "And shift right with carry",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "01010", "b", "c", "a"],
        pseudocode: "a = carry << 7 | (b & c) >> 1 #logical",
        cycles: 1
    },
    "cmp": {
        title: "Compare",
        args: {"a": "gpr", "b": "gpr"},
        encoding: ["01", "01011", "a", "b", "xxx"],
        pseudocode: "_ = b - c",
        cycles: 1
    },
    "bswp": {
        title: "Byte swap",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "01100", "b", "c", "a"],
        pseudocode: "a = (b >> 8) | (c << 8)",
        cycles: 1
    },
    "beq": {
        title: "Byte equality",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "01101", "b", "c", "a"],
        description: [
            "- Sets output bit 0 if lower byte of `b` equals lower byte of `c`",
            "- Sets output bit 1 if upper byte of `b` equals lower byte of `c`",
            "- Sets output bit 2 if lower byte of `b` equals upper byte of `c`",
            "- Sets output bit 3 if upper byte of `b` equals upper byte of `c`"
        ],
        cycles: 1
    },
    /* Free opcodes ["01", "01110"], ["01", "01111"], ["01", "10000"], ["01", "10001"] */
    /* TODO These would be nice to have, but require ability to write all three registers
    "mad": {
        title: "Multiply-add",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "10000", "b", "c", "a"],
        pseudocode: "a = a + (b * c)",
        cycles: "many (TODO)",
        description: "Calculates low 16 bits of unsigned multiplication of two 16bit numbers."
    },
    "divmod": {
        title: "Divide and modulo",
        args: {"a": "gpr", "b": "gpr", "c": "gpr"},
        encoding: ["01", "10001", "b", "c", "a"],
        pseudocode: "",
        cycles: "many (TODO)",
        description: "Calculates low 16 bits of unsigned multiplication of two 16bit numbers."
    },*/
    "cas": {
        title: "Compare and swap",
        args: {"address": "gpr", "expected": "gpr", "new": "gpr"},
        encoding: ["01", "10010", "new", "address", "expected"],
        pseudocode: [
            "if [address] == expected:",
            "    [address] = new",
            "else:",
            "    expected = [address]"
        ],
        cycles: 3,
        "_microcode": [
            "Tmp1 = [address]",
            "cmp expected, Tmp1; Instr = [Pc + 1]; Pc += 1",
            "if eq:",
            "    [address] = Rnew; end",
            "else:",
            "    expected = Tmp1; end",
        ],
        note: "`expected` returns the value of `[address]` **after** the operation",
    },
    "memadd": {
        title: "Fetch and add",
        args: {"value": "gpr", "address": "gpr", "inc": "gpr"},
        encoding: ["01", "10011", "inc", "address", "value"],
        pseudocode: [
            "value = [address] + inc",
            "[address] = value"
        ],
        note: "`value` returns the value of `[raddress]` **after** the operation",
        cycles: "3"
    },
    /* Free opcodes ["01", "10100"] - ["01", "11111"] */

    // Load/ store (Prefix 10)
    // =======================
    "ld": {
        title: "Load",
        args: {"dest": "gpr", "address": "gpr", "offset": "s7"},
        encoding: ["10", "0", "offset", "address", "dest"],
        pseudocode: "dest = [address + offset]",
        cycles: 2
    },
    "st": {
        title: "Store",
        args: {"address": "gpr", "value": "gpr", "offset": "s7"},
        encoding: ["10", "1", "offset", "address", "value"],
        pseudocode: "[address + offset] = value",
        cycles: 2
    },

    // Jumps (Prefix 110)
    // ===========================
    "jmp{condition}": {
        title: "Absolute jump {condition}",
        args: {"address": "gpr"},
        encoding: ["110", "0", "{condition}", "xxx", "address", "xxx"],
        pseudocode: "if {condition}: Pc = address",
        cycles: "TODO"
    },
    "rjmp{condition}": {
        title: "Relative jump {condition}",
        args: {"jump_offset": "s9"},
        encoding: ["110", "1", "{condition}", "jump_offset"],
        pseudocode: "if {condition}: Pc += jump_offset",
        cycles: 1
    },

    // Control registers (Prefix 1110)
    // ===============================
    "ldcr": {
        title: "Load from control register",
        args: {"a": "gpr", "cr": "cr"},
        encoding: ["1110", "0", "cr", "xxxxx", "a"],
        pseudocode: "a = cr",
        cycles: 1
    },
    "stcr": {
        title: "Store to control register",
        args: {"cr": "cr", "a": "gpr"},
        encoding: ["1110", "1", "cr", "xxxxx", "a"],
        pseudocode: "cr = a",
        cycles: 1
    },

    // System (Prefix 1111)
    // ============================
    "syscall": {
        title: "Syscall",
        args: {"code": "u6"},
        encoding: ["1111", "000", "code", "xxx"],
        cycles: "TODO",
        note: "Uses the 8bit immediate (field 5), overlapping with the two zero bits from opcode. This is not a problem."
    },
    "reti": {
        title: "Return from interrupt",
        encoding: ["1111", "001", "xxxxxxxxx"],
        pseudocode: [
            "Pc = IntPc",
            "apply ContextID",
        ],
        cycles: "TODO"
    },
    /* Free opcodes ["1111", "010"] - ["1111", "110"] */
    "break": {
        title: "Break",
        encoding: ["1111", "111", "xxxxxxxxx"],
        cycles: 1
    },
},
substitutions: {
    condition: {
        "": {
            title: "unconditional",
            encoding: "000",
            pseudocode: "true"
        },
        "?z": {
            title: "if zero",
            encoding: "001",
            pseudocode: "z"
        },
        "?c": {
            title: "if carry",
            encoding: "010",
            pseudocode: "c"
        },
        "?n": {
            title: "if negative",
            encoding: "011",
            pseudocode: "n"
        },
        /* Unused condition "100" */
        "?nz": {
            title: "if not zero",
            encoding: "101",
            pseudocode: "!z"
        },
        "?nc": {
            title: "if not carry",
            encoding: "110",
            pseudocode: "!c"
        },
        "?nn": {
            title: "if not negative",
            encoding: "111",
            pseudocode: "!n"
        },
    },
}
}

