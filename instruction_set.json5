{
instructions: {
    // Immediate operations (Prefix 00)
    // ================================
    "Add immediate": {
        syntax: "addi Ra, immediate",
        encoding: ["00", "000", "Ra[3]", "immediate[8]"],
        pseudocode: "Ra += immediate",
        cycles: 1
    },
    "Subtract immediate": {
        syntax: "subi Ra, immediate",
        encoding: ["00", "001", "Ra[3]", "immediate[8]"],
        pseudocode: "Ra -= immediate",
        cycles: 1
    },
    "And immediate": {
        syntax: "andi Ra, immediate",
        encoding: ["00", "010", "Ra[3]", "immediate[8]"],
        pseudocode: "Ra &= immediate",
        cycles: 1
    },
    "Or immediate": {
        syntax: "ori Ra, immediate",
        encoding: ["00", "011", "Ra[3]", "immediate[8]"],
        pseudocode: "Ra |= immediate",
        cycles: 1
    },
    "Load immediate": {
        syntax: "ldi Ra, immediate",
        encoding: ["00", "100", "Ra[3]", "immediate[8]"],
        pseudocode: "Ra = immediate",
        cycles: 1
    },
    "Load upper immediate": {
        syntax: "ldui Ra, immediate",
        encoding: ["00", "101", "Ra[3]", "immediate[8]"],
        pseudocode: "Ra = immediate << 8",
        cycles: 1
    },
    "Relative jump": {
        syntax: "rjmp{condition} immediate",
        encoding: ["00", "11", "condition", "x", "immediate[8]"],
        pseudocode: "if condition: Pc += immediate",
        cycles: 1
    },

    // 3 operand operations (Prefix 01)
    // ================================
    "Add": {
        syntax: "add Ra, Rb, Rc",
        encoding: ["01", "00000", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = Rb + Rc",
        cycles: 1
    },
    "Add with carry": {
        syntax: "addc Ra, Rb, Rc",
        encoding: ["01", "00001", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = Rb + Rc + carry",
        cycles: 1
    },
    "Subtract": {
        syntax: "sub Ra, Rb, Rc",
        encoding: ["01", "00010", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = Rb - Rc",
        cycles: 1
    },
    "Subtract with carry": {
        syntax: "subc Ra, Rb, Rc",
        encoding: ["01", "00011", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = Rb - Rc + carry",
        cycles: 1
    },
    "And": {
        syntax: "and Ra, Rb, Rc",
        encoding: ["01", "00100", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = Rb & Rc",
        cycles: 1
    },
    "Or": {
        syntax: "or Ra, Rb, Rc",
        encoding: ["01", "00101", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = Rb | Rc",
        cycles: 1
    },
    "Nor": {
        syntax: "nor Ra, Rb, Rc",
        encoding: ["01", "00110", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = ~(Rb | Rc)",
        cycles: 1
    },
    "Xor": {
        syntax: "xor Ra, Rb, Rc",
        encoding: ["01", "00111", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = Rb ^ Rc",
        cycles: 1
    },
    "And shift right": {
        syntax: "andshr Ra, Rb, Rc",
        encoding: ["01", "01000", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = (Rb & Rc) >> 1 (logical)",
        cycles: 1
    },
    "And shift right arithmetic": {
        syntax: "andshra Ra, Rb, Rc",
        encoding: ["01", "01001", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = (Rb & Rc) >> 1 (arithmetic)",
        cycles: 1
    },
    "And shift right with carry": {
        syntax: "andshrc Ra, Rb, Rc",
        encoding: ["01", "01010", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = carry << 7 | (Rb & Rc) >> 1 (logical)",
        cycles: 1
    },
    "Compare": {
        syntax: "cmp Rb, Rc",
        encoding: ["01", "01011", "Rb[3]", "Rc[3]", "xxx"],
        pseudocode: "_ = Rb - Rc",
        cycles: 1
    },
    "Byte swap": {
        syntax: "bswp",
        encoding: ["01", "01100", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = (Rb >> 8) | (Rc << 8)",
        cycles: 1
    },
    "Byte equality": {
        syntax: "beq",
        encoding: ["01", "01101", "Rb[3]", "Rc[3]", "Ra[3]"],
        description: [
            "Sets output bit 0 if lower byte of Rb equals lower byte of Rc",
            "Sets output bit 1 if upper byte of Rb equals lower byte of Rc",
            "Sets output bit 2 if lower byte of Rb equals upper byte of Rc",
            "Sets output bit 3 if upper byte of Rb equals upper byte of Rc"
        ],
        cycles: 1
    },
    /* Free opcodes ["01", "01110"], ["01", "01111"] */
    "Multiply-add": {
        syntax: "mad Ra, Rb, Rc",
        encoding: ["01", "10000", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "Ra = Ra + (Rb * Rc)",
        cycles: "many (TODO)",
        description: "Calculates low 16 bits of unsigned multiplication of two 16bit numbers."
    },
    /* Free opcode ["01", "10001"] */
    /* TODO
    "Divide and modulo": {
        syntax: "divmod Ra, Rb, Rc",
        encoding: ["01", "10001", "Rb[3]", "Rc[3]", "Ra[3]"],
        pseudocode: "",
        cycles: "many (TODO)",
        description: "Calculates low 16 bits of unsigned multiplication of two 16bit numbers."
    },*/
    "Compare and swap": {
        syntax: "cas Raddress, Rexpected, Rnew",
        encoding: ["01", "10010", "Rexpected[3]", "Raddress[3]", "Rnew[3]"],
        pseudocode: [
            "if [Raddress] == Rexpected:",
            "    [Raddress] = Rnew",
            "else:",
            "    Rnew = [Raddress]"
        ],
        cycles: 3,
        "_microcode": [
            "Tmp1 = [Raddress]",
            "cmp Rold, Tmp1; Instr = [Pc + 1]; Pc += 1",
            "if eq: [Raddress] = Rnew ; end ; else Rnew = Tmp1 ; end"
        ]
    },
    /* Free opcodes ["01", "10011"] - ["01", "11111"] */
    /*"Memory two character search": {
        syntax: "mem2chr Raddress, Rend_address, Rneedle",
        encoding: ["01", "10011", "Rend_address[3]", "Rneedle[3]", "Raddress[3]"],
        pseudocode: [
            "while Raddress != Rend_address:"
            "   beq Tmp1, [Raddress], Rneedle",
            "   if !zero:",
            "       break"
            "   Raddress += 1"
        ],
        cycles: "TODO"
        description: [
            "Search through memory, looking for the first occurence of either of two",
            "characters in Rneedle. Can be used to implement `strlen`, `memchr`, `strchr`"
        ]
    },*/
    /* TODO: fetch and add, memcpy, memset, strlen? */

    // Load/ store (Prefix 10)
    // =======================
    "Load": {
        syntax: "ld Rdest, Raddress, immediate",
        encoding: ["10", "0", "immediate[7]", "Raddress[3]", "Rdest[3]"],
        pseudocode: "Rdest = [Raddress + sign_extend(immediate)]",
        cycles: 2
    },
    "Store": {
        syntax: "st Raddress, Rvalue, immediate",
        encoding: ["10", "1", "immediate[7]", "Raddress[3]", "Rvalue[3]"],
        pseudocode: "[Raddress + sign_extend(immediate)] = Rvalue",
        cycles: 2
    },

    // Indirect jumps (Prefix 110)
    // ===========================
    "Jump": {
        syntax: "jmp{condition} Raddress",
        encoding: ["110", "0", "condition[3]", "xxx", "Raddress[3]", "xxx"],
        pseudocode: "if condition: Pc = Raddress",
        cycles: "TODO"
    },
    "Jump and link": {
        syntax: "jal{condition} Raddress, Rlink",
        encoding: ["110", "1", "condition[3]", "xxx", "Raddress[3]", "Rlink[3]"],
        pseudocode: [
            "if condition:",
            "    tmp = Pc",
            "    Pc = Raddress",
            "    Rlink = tmp"
        ],
        cycles: "TODO"
    },

    // Control registers (Prefix 1110)
    // ===============================
    "Load control register": {
        syntax: "ldc Ra, C",
        encoding: ["1110", "0", "C[3]", "xxxxx", "Ra[3]"],
        pseudocode: "Ra = C",
        cycles: 1
    },
    "Store control register": {
        syntax: "stc Ra, C",
        encoding: ["1110", "1", "C[3]", "xxxxx", "Ra[3]"],
        pseudocode: "C = Ra",
        cycles: 1
    },

    // System (Prefix 1111)
    // ============================
    "Syscall 1": {
        syntax: "syscall1",
        encoding: ["1111", "000", "xxxxxxxxx"],
        cycles: 1
    },
    "Syscall 2": {
        syntax: "syscall2",
        encoding: ["1111", "001", "xxxxxxxxx"],
        cycles: 1
    },
    "Syscall 3": {
        syntax: "syscall2",
        encoding: ["1111", "010", "xxxxxxxxx"],
        cycles: 1
    },
    "Return from interrupt": {
        syntax: "reti",
        encoding: ["1111", "011", "xxxxxxxxx"],
        pseudocode: [
            "Pc = IntPc",
            "apply ContextID",
        ],
        cycles: "TODO"
    },
    /* Free opcodes ["1111", "010"], ["1111", "011"] */
    "Break": {
        syntax: "break",
        encoding: ["1111", "111", "xxxxxxxxx"],
        cycles: 1
    },
},
condition: {
    "Always": {
        syntax: "",
        encoding: "000",
    },
    "If zero": {
        syntax: "?z",
        encoding: "001",
    },
    "If carry": {
        syntax: "?c",
        encoding: "010",
    },
    "If negative": {
        syntax: "?n",
        encoding: "011",
    },
    /* Unused condition "100" */
    "If not zero": {
        syntax: "?nz",
        encoding: "101",
    },
    "If carry": {
        syntax: "?nc",
        encoding: "110",
    },
    "If negative": {
        syntax: "?nn",
        encoding: "111",
    },
}
}

