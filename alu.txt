Tos0 <- Tos1 <OP> Tos0

Op (3b):
    Add                         Tos1 + Tos0, C <- 0
 X  Add + Carry
    Sub                         Tos1 + ~Tos0, C <- 1
    Sub - 1 + Carry             Tos1 + ~Tos0
    And                         ~(Tos1 Nand Tos0)
    Or                          (~Tos1 Nand Tos0)
 X  Xor
 X  Nand
    Not Tos0                    0 Nand Tos0
    Neg Tos0                    0 + ~Tos0, C <- 1
    Neg Tos0 + Carry            0 + ~Tos0
    Inc Tos0                    0 + Tos0, C <- 1
    Inc Tos0 + Carry            0 + Tos0
    Dec Tos0                    ~0 + Tos0, C <- 0
    Dec Tos0 - 1 + Carry        ~0 + Tos
    Shl Tos0                    Shl Tos0, Carry <-0
 X  Shl Tos0 + Carry
    Shr Tos0                    Shr Tos0, Carry <- 0
 X  Shr Tos0 + Carry << 7
    Shr Tos0 Arithmetic         Shr Tos0, Carry <- sign
 X  Sex Tos0                    Carry <- sign
 X  Tos1
 X  Tos1 < Tos0
    Tos1 > Tos0                 ~Tos1 < ~Tos0
    Tos1 <= Tos0                ~(~Tos1 < ~Tos0)
    Tos1 >= Tos0                ~(Tos1 < Tos0)

Carry behavior (2b):
    Pass C
    Pass Tos0 >> 7
    0
    1

Input/output conditioning (4b):
    Zero Tos1
    ~Tos0
    ~Tos1
    ~Output


A < B = -A > -B = ~A > ~B
